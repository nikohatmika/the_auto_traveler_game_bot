// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	players "auto_traveler/bussiness/players"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *Repository) Delete(ctx context.Context, ID int) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx
func (_m *Repository) Find(ctx context.Context) ([]players.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []players.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []players.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]players.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) FindByEmail(ctx context.Context, email string) (players.Domain, error) {
	ret := _m.Called(ctx, email)

	var r0 players.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) players.Domain); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(players.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Repository) FindByID(ctx context.Context, id int) (players.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 players.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) players.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(players.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, data
func (_m *Repository) Store(ctx context.Context, data *players.Domain) (players.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 players.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *players.Domain) players.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(players.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *players.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, data
func (_m *Repository) Update(ctx context.Context, ID int, data *players.Domain) (players.Domain, error) {
	ret := _m.Called(ctx, ID, data)

	var r0 players.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, *players.Domain) players.Domain); ok {
		r0 = rf(ctx, ID, data)
	} else {
		r0 = ret.Get(0).(players.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *players.Domain) error); ok {
		r1 = rf(ctx, ID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
